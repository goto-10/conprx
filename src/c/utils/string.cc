//- Copyright 2014 the Neutrino authors (see AUTHORS).
//- Licensed under the Apache License, Version 2.0 (see LICENSE).

#include "string.hh"

#include "utils/alloc.hh"

using namespace conprx;

size_t StringUtils::wstrlen(wide_cstr_t str) {
  wide_cstr_t p = str;
  while (*p)
    p++;
  return p - str;
}

tclib::Blob StringUtils::as_blob(ansi_cstr_t str, bool include_null) {
  return tclib::Blob(str, strlen(str) + (include_null ? 1 : 0));
}

tclib::Blob StringUtils::as_blob(wide_cstr_t str, bool include_null) {
  size_t char_count = wstrlen(str) + (include_null ? 1 : 0);
  return tclib::Blob(str, char_count * sizeof(wide_char_t));
}

uint8_t MsDosCodec::wide_to_ansi_char(uint16_t chr) {
  uint16_t index = chr;
  if (index < 0x0080) {
    // Wide and ansi overlap in the ascii range.
    return static_cast<ansi_char_t>(chr);
  } else if (0x00a0 <= index && index < 0x0100) {
    return kWideToDiacritic[index - 0x00a0];
  } else if (0x0393 <= index && index < 0x03c7) {
    return kWideToNonLatin[index - 0x0393];
  } else if (0x2550 <= index && index < 0x256d) {
    return kWideToGraphic[index - 0x2550];
  } else {
    switch (index) {
      case 0x0192: return 0x9f;
      case 0x0393: return 0xe2;
      case 0x0398: return 0xe9;
      case 0x03a3: return 0xe4;
      case 0x03a6: return 0xe8;
      case 0x03a9: return 0xea;
      case 0x03b1: return 0xe0;
      case 0x03b4: return 0xeb;
      case 0x03b5: return 0xee;
      case 0x03c0: return 0xe3;
      case 0x03c3: return 0xe5;
      case 0x03c4: return 0xe7;
      case 0x03c6: return 0xed;
      case 0x207f: return 0xfc;
      case 0x20a7: return 0x9e;
      case 0x2219: return 0xf9;
      case 0x221a: return 0xfb;
      case 0x221e: return 0xec;
      case 0x2229: return 0xef;
      case 0x2248: return 0xf7;
      case 0x2261: return 0xf0;
      case 0x2264: return 0xf3;
      case 0x2265: return 0xf2;
      case 0x2310: return 0xa9;
      case 0x2320: return 0xf4;
      case 0x2321: return 0xf5;
      case 0x2500: return 0xc4;
      case 0x2502: return 0xb3;
      case 0x250c: return 0xda;
      case 0x2510: return 0xbf;
      case 0x2514: return 0xc0;
      case 0x2518: return 0xd9;
      case 0x251c: return 0xc3;
      case 0x2524: return 0xb4;
      case 0x252c: return 0xc2;
      case 0x2534: return 0xc1;
      case 0x253c: return 0xc5;
      case 0x2580: return 0xdf;
      case 0x2584: return 0xdc;
      case 0x2588: return 0xdb;
      case 0x258c: return 0xdd;
      case 0x2590: return 0xde;
      case 0x2591: return 0xb0;
      case 0x2592: return 0xb1;
      case 0x2593: return 0xb2;
      case 0x25a0: return 0xfe;
      default: return '?';
    }
  }
}

// This was determined experimentally ("testperimentally?") as the table that
// makes title_aw_complete in test_conback pass.
const uint16_t MsDosCodec::kAnsiToWideMap[256] = {
    0x0000, 0x0001, 0x0002, 0x0003, 0x0004, 0x0005, 0x0006, 0x0007,
    0x0008, 0x0009, 0x000a, 0x000b, 0x000c, 0x000d, 0x000e, 0x000f,
    0x0010, 0x0011, 0x0012, 0x0013, 0x0014, 0x0015, 0x0016, 0x0017,
    0x0018, 0x0019, 0x001a, 0x001b, 0x001c, 0x001d, 0x001e, 0x001f,
    0x0020, 0x0021, 0x0022, 0x0023, 0x0024, 0x0025, 0x0026, 0x0027,
    0x0028, 0x0029, 0x002a, 0x002b, 0x002c, 0x002d, 0x002e, 0x002f,
    0x0030, 0x0031, 0x0032, 0x0033, 0x0034, 0x0035, 0x0036, 0x0037,
    0x0038, 0x0039, 0x003a, 0x003b, 0x003c, 0x003d, 0x003e, 0x003f,
    0x0040, 0x0041, 0x0042, 0x0043, 0x0044, 0x0045, 0x0046, 0x0047,
    0x0048, 0x0049, 0x004a, 0x004b, 0x004c, 0x004d, 0x004e, 0x004f,
    0x0050, 0x0051, 0x0052, 0x0053, 0x0054, 0x0055, 0x0056, 0x0057,
    0x0058, 0x0059, 0x005a, 0x005b, 0x005c, 0x005d, 0x005e, 0x005f,
    0x0060, 0x0061, 0x0062, 0x0063, 0x0064, 0x0065, 0x0066, 0x0067,
    0x0068, 0x0069, 0x006a, 0x006b, 0x006c, 0x006d, 0x006e, 0x006f,
    0x0070, 0x0071, 0x0072, 0x0073, 0x0074, 0x0075, 0x0076, 0x0077,
    0x0078, 0x0079, 0x007a, 0x007b, 0x007c, 0x007d, 0x007e, 0x007f,
    0x00c7, 0x00fc, 0x00e9, 0x00e2, 0x00e4, 0x00e0, 0x00e5, 0x00e7,
    0x00ea, 0x00eb, 0x00e8, 0x00ef, 0x00ee, 0x00ec, 0x00c4, 0x00c5,
    0x00c9, 0x00e6, 0x00c6, 0x00f4, 0x00f6, 0x00f2, 0x00fb, 0x00f9,
    0x00ff, 0x00d6, 0x00dc, 0x00a2, 0x00a3, 0x00a5, 0x20a7, 0x0192,
    0x00e1, 0x00ed, 0x00f3, 0x00fa, 0x00f1, 0x00d1, 0x00aa, 0x00ba,
    0x00bf, 0x2310, 0x00ac, 0x00bd, 0x00bc, 0x00a1, 0x00ab, 0x00bb,
    0x2591, 0x2592, 0x2593, 0x2502, 0x2524, 0x2561, 0x2562, 0x2556,
    0x2555, 0x2563, 0x2551, 0x2557, 0x255d, 0x255c, 0x255b, 0x2510,
    0x2514, 0x2534, 0x252c, 0x251c, 0x2500, 0x253c, 0x255e, 0x255f,
    0x255a, 0x2554, 0x2569, 0x2566, 0x2560, 0x2550, 0x256c, 0x2567,
    0x2568, 0x2564, 0x2565, 0x2559, 0x2558, 0x2552, 0x2553, 0x256b,
    0x256a, 0x2518, 0x250c, 0x2588, 0x2584, 0x258c, 0x2590, 0x2580,
    0x03b1, 0x00df, 0x0393, 0x03c0, 0x03a3, 0x03c3, 0x00b5, 0x03c4,
    0x03a6, 0x0398, 0x03a9, 0x03b4, 0x221e, 0x03c6, 0x03b5, 0x2229,
    0x2261, 0x00b1, 0x2265, 0x2264, 0x2320, 0x2321, 0x00f7, 0x2248,
    0x00b0, 0x2219, 0x00b7, 0x221a, 0x207f, 0x00b2, 0x25a0, 0x00a0
};

const uint8_t MsDosCodec::kWideToDiacritic[96] = {
    0xff, 0xad, 0x9b, 0x9c, 0x3f, 0x9d, 0x3f, 0x3f, 0x3f, 0x3f, 0xa6, 0xae,
    0xaa, 0x3f, 0x3f, 0x3f, 0xf8, 0xf1, 0xfd, 0x3f, 0x3f, 0xe6, 0x3f, 0xfa,
    0x3f, 0x3f, 0xa7, 0xaf, 0xac, 0xab, 0x3f, 0xa8, 0x3f, 0x3f, 0x3f, 0x3f,
    0x8e, 0x8f, 0x92, 0x80, 0x3f, 0x90, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f,
    0x3f, 0xa5, 0x3f, 0x3f, 0x3f, 0x3f, 0x99, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f,
    0x9a, 0x3f, 0x3f, 0xe1, 0x85, 0xa0, 0x83, 0x3f, 0x84, 0x86, 0x91, 0x87,
    0x8a, 0x82, 0x88, 0x89, 0x8d, 0xa1, 0x8c, 0x8b, 0x3f, 0xa4, 0x95, 0xa2,
    0x93, 0x3f, 0x94, 0xf6, 0x3f, 0x97, 0xa3, 0x96, 0x81, 0x3f, 0x3f, 0x98
};

const uint8_t MsDosCodec::kWideToNonLatin[52] = {
    0xe2, 0x3f, 0x3f, 0x3f, 0x3f, 0xe9, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f,
    0x3f, 0x3f, 0x3f, 0x3f, 0xe4, 0x3f, 0x3f, 0xe8, 0x3f, 0x3f, 0xea, 0x3f,
    0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0xe0, 0x3f, 0x3f, 0xeb, 0xee, 0x3f,
    0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0xe3, 0x3f, 0x3f,
    0xe5, 0xe7, 0x3f, 0xed
};

const uint8_t MsDosCodec::kWideToGraphic[29] = {
    0xcd, 0xba, 0xd5, 0xd6, 0xc9, 0xb8, 0xb7, 0xbb, 0xd4, 0xd3, 0xc8, 0xbe,
    0xbd, 0xbc, 0xc6, 0xc7, 0xcc, 0xb5, 0xb6, 0xb9, 0xd1, 0xd2, 0xcb, 0xcf,
    0xd0, 0xca, 0xd8, 0xd7, 0xce
};


ucs16_t conprx::ucs16_default_dup(ucs16_t str) {
  if (ucs16_is_empty(str))
    return str;
  size_t size = sizeof(wide_char_t) * (str.length + 1);
  blob_t buf = allocator_default_malloc(size);
  wide_str_t chars = (wide_str_t) buf.start;
  blob_copy_to(blob_new(str.chars, size), buf);
  chars[str.length] = '\0';
  return ucs16_new(chars, str.length);
}

void conprx::ucs16_default_delete(ucs16_t str) {
  if (ucs16_is_empty(str))
    return;
  size_t size = sizeof(wide_char_t) * (str.length + 1);
  allocator_default_free(blob_new(str.chars, size));
}

#ifdef IS_MSVC
#include "string-msvc.cc"
#else
#include "string-posix.cc"
#endif
